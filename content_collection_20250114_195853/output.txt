==================================================
СБОРКА ДАННЫХ
==================================================

СОДЕРЖИМОЕ БАЗЫ ДАННЫХ
==================================================

=== Таблица: django_migrations ===

Columns: id, app, name, applied
(1, 'contenttypes', '0001_initial', '2025-01-14 14:16:46.577793')
(2, 'auth', '0001_initial', '2025-01-14 14:16:46.593878')
(3, 'admin', '0001_initial', '2025-01-14 14:16:46.606427')
(4, 'admin', '0002_logentry_remove_auto_add', '2025-01-14 14:16:46.616460')
(5, 'admin', '0003_logentry_add_action_flag_choices', '2025-01-14 14:16:46.626480')
(6, 'contenttypes', '0002_remove_content_type_name', '2025-01-14 14:16:46.646675')
(7, 'auth', '0002_alter_permission_name_max_length', '2025-01-14 14:16:46.657526')
(8, 'auth', '0003_alter_user_email_max_length', '2025-01-14 14:16:46.666380')
(9, 'auth', '0004_alter_user_username_opts', '2025-01-14 14:16:46.676494')
(10, 'auth', '0005_alter_user_last_login_null', '2025-01-14 14:16:46.689405')
(11, 'auth', '0006_require_contenttypes_0002', '2025-01-14 14:16:46.696410')
(12, 'auth', '0007_alter_validators_add_error_messages', '2025-01-14 14:16:46.696410')
(13, 'auth', '0008_alter_user_username_max_length', '2025-01-14 14:16:46.716623')
(14, 'auth', '0009_alter_user_last_name_max_length', '2025-01-14 14:16:46.726765')
(15, 'auth', '0010_alter_group_name_max_length', '2025-01-14 14:16:46.736510')
(16, 'auth', '0011_update_proxy_permissions', '2025-01-14 14:16:46.746582')
(17, 'auth', '0012_alter_user_first_name_max_length', '2025-01-14 14:16:46.756358')
(18, 'documents', '0001_initial', '2025-01-14 14:16:46.766766')
(19, 'organizations', '0001_initial', '2025-01-14 14:16:46.776289')
(20, 'positions', '0001_initial', '2025-01-14 14:16:46.786327')
(21, 'employees', '0001_initial', '2025-01-14 14:16:46.796291')
(22, 'sessions', '0001_initial', '2025-01-14 14:16:46.806307')

=== Таблица: sqlite_sequence ===

Columns: name, seq
('django_migrations', 22)
('django_admin_log', 0)
('django_content_type', 11)
('auth_permission', 44)
('auth_group', 0)
('auth_user', 2)
('organizations_organization', 2)
('organizations_department', 3)
('positions_profession', 3)
('employees_employee', 3)

=== Таблица: auth_group_permissions ===

Columns: id, group_id, permission_id

=== Таблица: auth_user_groups ===

Columns: id, user_id, group_id

=== Таблица: auth_user_user_permissions ===

Columns: id, user_id, permission_id

=== Таблица: django_admin_log ===

Columns: id, object_id, object_repr, action_flag, change_message, content_type_id, user_id, action_time

=== Таблица: django_content_type ===

Columns: id, app_label, model
(1, 'admin', 'logentry')
(2, 'auth', 'permission')
(3, 'auth', 'group')
(4, 'auth', 'user')
(5, 'contenttypes', 'contenttype')
(6, 'sessions', 'session')
(7, 'documents', 'document')
(8, 'employees', 'employee')
(9, 'organizations', 'organization')
(10, 'organizations', 'department')
(11, 'positions', 'profession')

=== Таблица: auth_permission ===

Columns: id, content_type_id, codename, name
(1, 1, 'add_logentry', 'Can add log entry')
(2, 1, 'change_logentry', 'Can change log entry')
(3, 1, 'delete_logentry', 'Can delete log entry')
(4, 1, 'view_logentry', 'Can view log entry')
(5, 2, 'add_permission', 'Can add permission')
(6, 2, 'change_permission', 'Can change permission')
(7, 2, 'delete_permission', 'Can delete permission')
(8, 2, 'view_permission', 'Can view permission')
(9, 3, 'add_group', 'Can add group')
(10, 3, 'change_group', 'Can change group')
(11, 3, 'delete_group', 'Can delete group')
(12, 3, 'view_group', 'Can view group')
(13, 4, 'add_user', 'Can add user')
(14, 4, 'change_user', 'Can change user')
(15, 4, 'delete_user', 'Can delete user')
(16, 4, 'view_user', 'Can view user')
(17, 5, 'add_contenttype', 'Can add content type')
(18, 5, 'change_contenttype', 'Can change content type')
(19, 5, 'delete_contenttype', 'Can delete content type')
(20, 5, 'view_contenttype', 'Can view content type')
(21, 6, 'add_session', 'Can add session')
(22, 6, 'change_session', 'Can change session')
(23, 6, 'delete_session', 'Can delete session')
(24, 6, 'view_session', 'Can view session')
(25, 7, 'add_document', 'Can add Документ')
(26, 7, 'change_document', 'Can change Документ')
(27, 7, 'delete_document', 'Can delete Документ')
(28, 7, 'view_document', 'Can view Документ')
(29, 8, 'add_employee', 'Can add Сотрудник')
(30, 8, 'change_employee', 'Can change Сотрудник')
(31, 8, 'delete_employee', 'Can delete Сотрудник')
(32, 8, 'view_employee', 'Can view Сотрудник')
(33, 9, 'add_organization', 'Can add Организация')
(34, 9, 'change_organization', 'Can change Организация')
(35, 9, 'delete_organization', 'Can delete Организация')
(36, 9, 'view_organization', 'Can view Организация')
(37, 10, 'add_department', 'Can add Структурное подразделение')
(38, 10, 'change_department', 'Can change Структурное подразделение')
(39, 10, 'delete_department', 'Can delete Структурное подразделение')
(40, 10, 'view_department', 'Can view Структурное подразделение')
(41, 11, 'add_profession', 'Can add Профессия/Должность')
(42, 11, 'change_profession', 'Can change Профессия/Должность')
(43, 11, 'delete_profession', 'Can delete Профессия/Должность')
(44, 11, 'view_profession', 'Can view Профессия/Должность')

=== Таблица: auth_group ===

Columns: id, name

=== Таблица: auth_user ===

Columns: id, password, last_login, is_superuser, username, last_name, email, is_staff, is_active, date_joined, first_name
(1, 'pbkdf2_sha256$870000$9u3N9NpCayyyKOz1IRywxZ$rSjTm2KWH/1nbu67jdoxKEUryAht4rkbZXAnf//6VL4=', None, 0, 'admin1', '', '', 0, 1, '2025-01-14 14:27:35.059154', '')
(2, 'pbkdf2_sha256$870000$TKLacQxKiTJGZfpDfA2Z8E$nZan5Pp49MLakKT2SFWRQ3FLLPKTpqBWjFmgrOK03no=', None, 0, 'user1', '', '', 0, 1, '2025-01-14 14:27:35.527449', '')

=== Таблица: documents_document ===

Columns: id, name, file

=== Таблица: organizations_organization ===

Columns: id, full_name, short_name, full_name_ru, full_name_by, requisites_ru, requisites_by
(1, 'ООО "Ромашка"', 'Ромашка', 'Общество с ограниченной ответственностью "Ромашка"', 'Таварыства з абмежаванай адказнасцю "Рамонак"', 'Реквизиты ООО "Ромашка" на русском', 'Рэквізіты ТАА "Рамонак" на беларускай')
(2, 'ЗАО "Лютик"', 'Лютик', 'Закрытое акционерное общество "Лютик"', 'Закрытае акцыянернае таварыства "Люцік"', 'Реквизиты ЗАО "Лютик" на русском', 'Рэквізіты ЗАТ "Люцік" на беларускай')

=== Таблица: organizations_department ===

Columns: id, name, short_name, organization_id
(1, 'Отдел разработки', 'Разработка', 1)
(2, 'Отдел тестирования', 'Тестирование', 1)
(3, 'Отдел продаж', 'Продажи', 2)

=== Таблица: positions_profession ===

Columns: id, department_name, instruction_numbers, el_group, probation_period, contract_instruction, is_responsible, is_electrical_staff, department_id, organization_id
(1, 'Отдел разработки', '1,2,3', 'III', 20, 'Инструкция по договору подряда №1', 1, 1, 1, 1)
(2, 'Отдел тестирования', '4,5', 'II', 10, 'Инструкция по договору подряда №2', 0, 0, 2, 1)
(3, 'Отдел продаж', '6', 'I', 15, 'Инструкция по договору подряда №3', 1, 0, 3, 2)

=== Таблица: employees_employee ===

Columns: id, full_name, full_name_dative, birth_date, is_contract_work, address, phone, email, organization_id, profession_id
(1, 'Иванов Иван Иванович', 'Иванову Ивану Ивановичу', '1990-05-15', 0, 'г. Минск, ул. Ленина, д. 1', '+375291111111', 'ivanov@example.com', 1, 1)
(2, 'Петров Петр Петрович', 'Петрову Петру Петровичу', '1995-10-20', 1, 'г. Минск, ул. Пушкина, д. 2', '+375292222222', 'petrov@example.com', 1, 2)
(3, 'Сидоров Сидор Сидорович', 'Сидорову Сидору Сидоровичу', '1988-01-28', 0, 'г. Минск, ул. Якуба Коласа, д. 3', '+375293333333', 'sidorov@example.com', 2, 3)

=== Таблица: django_session ===

Columns: session_key, session_data, expire_date

==================================================

СОДЕРЖИМОЕ ФАЙЛОВ
==================================================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\.env.example
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\collect_files.py
==============================
import os
import sqlite3
from datetime import datetime

def should_skip_directory(dirname):
    """Проверяет, нужно ли пропустить директорию"""
    # Список директорий для пропуска
    skip_dirs = {'venv', '.idea', '.git', '.vs', '.pytest_cache', '__pycache__'}
    return dirname.startswith('.') or dirname in skip_dirs


def read_file_content(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    except Exception as e:
        return f"Ошибка чтения файла: {str(e)}"


def get_tables_from_sqlite(db_path):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Получаем список всех таблиц
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()

        result = []
        for table in tables:
            table_name = table[0]
            result.append(f"\n=== Таблица: {table_name} ===\n")

            # Получаем все данные из таблицы
            cursor.execute(f"SELECT * FROM {table_name}")
            rows = cursor.fetchall()

            # Получаем имена столбцов
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = [col[1] for col in cursor.fetchall()]
            result.append("Columns: " + ", ".join(columns))

            # Добавляем данные
            for row in rows:
                result.append(str(row))

        conn.close()
        return "\n".join(result)
    except Exception as e:
        return f"Ошибка чтения базы данных: {str(e)}"


def main():
    root_dir = r'd:\YandexDisk\OT_online'
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    db_path = os.path.join(root_dir, 'db.sqlite3')

    # Создаем директорию для выходных файлов
    output_dir = os.path.join(root_dir, f'content_collection_{timestamp}')
    os.makedirs(output_dir, exist_ok=True)

    # Создаем один файл для вывода
    output_file = os.path.join(output_dir, 'output.txt')

    # Получаем все файлы для анализа
    all_files = []
    for root, dirs, files in os.walk(root_dir):
        dirs[:] = [d for d in dirs if not should_skip_directory(d)]
        for file in files:
            if file != 'db.sqlite3' and not file.endswith('.txt'):
                all_files.append(os.path.join(root, file))

    # Записываем содержимое в один файл
    with open(output_file, 'w', encoding='utf-8') as out_file:
        # Заголовок файла
        out_file.write(f"{'='*50}\n")
        out_file.write(f"СБОРКА ДАННЫХ\n")
        out_file.write(f"{'='*50}\n\n")

        # Добавляем содержимое базы данных
        out_file.write("СОДЕРЖИМОЕ БАЗЫ ДАННЫХ\n")
        out_file.write("=" * 50 + "\n")
        out_file.write(get_tables_from_sqlite(db_path))
        out_file.write("\n\n" + "=" * 50 + "\n\n")

        # Записываем содержимое файлов
        out_file.write(f"СОДЕРЖИМОЕ ФАЙЛОВ\n")
        out_file.write("=" * 50 + "\n")

        for file_path in all_files:
            out_file.write("\n\n" + "=" * 30 + "\n")
            out_file.write(f"ФАЙЛ: {file_path}\n")
            out_file.write("=" * 30 + "\n")
            out_file.write(read_file_content(file_path))

    print(f"Файл создан: {output_file}")


if __name__ == "__main__":
    main()

==============================
ФАЙЛ: d:\YandexDisk\OT_online\manage.py
==============================
#!/usr/bin/env python
import os
import sys
if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


==============================
ФАЙЛ: d:\YandexDisk\OT_online\project_setup.py
==============================
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from apps.organizations.models import Organization, Department
from apps.positions.models import Profession
from apps.employees.models import Employee

def create_initial_data():
    """Создает начальные данные для базы данных."""
    # Создание пользователей
    user1 = User.objects.create_user(username='admin1', password='password1')
    user2 = User.objects.create_user(username='user1', password='password2')

    # Создание организаций
    org1 = Organization.objects.create(
        full_name='ООО "Ромашка"',
        short_name='Ромашка',
        full_name_ru='Общество с ограниченной ответственностью "Ромашка"',
        full_name_by='Таварыства з абмежаванай адказнасцю "Рамонак"',
        requisites_ru='Реквизиты ООО "Ромашка" на русском',
        requisites_by='Рэквізіты ТАА "Рамонак" на беларускай'
    )
    org2 = Organization.objects.create(
        full_name='ЗАО "Лютик"',
        short_name='Лютик',
        full_name_ru='Закрытое акционерное общество "Лютик"',
        full_name_by='Закрытае акцыянернае таварыства "Люцік"',
        requisites_ru='Реквизиты ЗАО "Лютик" на русском',
        requisites_by='Рэквізіты ЗАТ "Люцік" на беларускай'
    )
    # Закрепление организаций за пользователями
    user1.organization = org1
    user1.save()
    user2.organization = org2
    user2.save()

    # Создание структурных подразделений
    dep1 = Department.objects.create(
        organization=org1,
        name='Отдел разработки',
        short_name='Разработка'
    )
    dep2 = Department.objects.create(
        organization=org1,
        name='Отдел тестирования',
        short_name='Тестирование'
    )
    dep3 = Department.objects.create(
        organization=org2,
        name='Отдел продаж',
        short_name='Продажи'
    )

    # Создание профессий
    prof1 = Profession.objects.create(
        organization=org1,
        department=dep1,
        department_name = 'Отдел разработки',
        instruction_numbers='1,2,3',
        el_group='III',
        probation_period=20,
        contract_instruction='Инструкция по договору подряда №1',
        is_responsible=True,
        is_electrical_staff=True,
    )
    prof2 = Profession.objects.create(
        organization=org1,
        department=dep2,
         department_name = 'Отдел тестирования',
        instruction_numbers='4,5',
        el_group='II',
        probation_period=10,
        contract_instruction='Инструкция по договору подряда №2',
        is_responsible=False,
        is_electrical_staff=False,
    )
    prof3 = Profession.objects.create(
        organization=org2,
        department=dep3,
        department_name = 'Отдел продаж',
        instruction_numbers='6',
        el_group='I',
        probation_period=15,
        contract_instruction='Инструкция по договору подряда №3',
         is_responsible=True,
        is_electrical_staff=False,
    )

    # Создание сотрудников
    emp1 = Employee.objects.create(
        organization=org1,
        full_name='Иванов Иван Иванович',
        full_name_dative='Иванову Ивану Ивановичу',
        birth_date='1990-05-15',
        profession=prof1,
        is_contract_work=False,
        address='г. Минск, ул. Ленина, д. 1',
        phone='+375291111111',
        email='ivanov@example.com',
    )
    emp2 = Employee.objects.create(
        organization=org1,
        full_name='Петров Петр Петрович',
         full_name_dative='Петрову Петру Петровичу',
        birth_date='1995-10-20',
        profession=prof2,
        is_contract_work=True,
        address='г. Минск, ул. Пушкина, д. 2',
        phone='+375292222222',
        email='petrov@example.com'
    )
    emp3 = Employee.objects.create(
        organization=org2,
         full_name='Сидоров Сидор Сидорович',
        full_name_dative='Сидорову Сидору Сидоровичу',
        birth_date='1988-01-28',
        profession=prof3,
        is_contract_work=False,
        address='г. Минск, ул. Якуба Коласа, д. 3',
        phone='+375293333333',
        email='sidorov@example.com'
    )
    print("Начальные данные успешно созданы.")

if __name__ == '__main__':
    create_initial_data()

==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\admin.py
==============================

from django.contrib import admin
from .models import Document

admin.site.register(Document)


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\apps.py
==============================

from django.apps import AppConfig

class DocumentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.documents'


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\models.py
==============================

from django.db import models

class Document(models.Model):
    name = models.CharField(max_length=255, verbose_name='Название документа')
    file = models.FileField(upload_to='documents/', verbose_name='Файл документа')

    def __str__(self):
        return self.name

    class Meta:
         verbose_name = "Документ"
         verbose_name_plural = "Документы"


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\serializers.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\urls.py
==============================

from django.urls import path
urlpatterns = [
    # здесь будут ваши URL-маршруты
]
            

==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\views.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\migrations\0001_initial.py
==============================
# Generated by Django 5.1.4 on 2025-01-14 14:15

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название документа')),
                ('file', models.FileField(upload_to='documents/', verbose_name='Файл документа')),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
            },
        ),
    ]


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\documents\migrations\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\admin.py
==============================

from django.contrib import admin
from .models import Employee

admin.site.register(Employee)


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\apps.py
==============================

from django.apps import AppConfig

class EmployeesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.employees'


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\forms.py
==============================

from django import forms
from .models import Employee
from apps.organizations.models import Department, Organization
from apps.positions.models import Profession

class EmployeeForm(forms.ModelForm):
    class Meta:
        model = Employee
        fields = ['organization', 'full_name', 'full_name_dative', 'birth_date', 'profession', 'is_contract_work', 'address', 'phone', 'email']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['profession'].queryset = Profession.objects.none()

        if 'organization' in self.data:
            try:
                organization_id = int(self.data.get('organization'))
                self.fields['profession'].queryset = Profession.objects.filter(organization_id=organization_id)
            except (ValueError, TypeError):
                pass


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\models.py
==============================

from django.db import models
from apps.organizations.models import Organization
from apps.positions.models import Profession

class Employee(models.Model):
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, verbose_name="Организация")
    full_name = models.CharField(max_length=255, verbose_name="ФИО")
    full_name_dative = models.CharField(max_length=255, verbose_name="ФИО в дательном падеже")
    birth_date = models.DateField(verbose_name="Дата рождения")
    profession = models.ForeignKey(Profession, on_delete=models.CASCADE, verbose_name="Профессия (Должность)")
    is_contract_work = models.BooleanField(default=False, verbose_name="Договор подряда")
    address = models.CharField(max_length=255, verbose_name="Адрес")
    phone = models.CharField(max_length=20, verbose_name="Телефон")
    email = models.EmailField(verbose_name="Email")

    def __str__(self):
        return self.full_name

    class Meta:
        verbose_name = "Сотрудник"
        verbose_name_plural = "Сотрудники"


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\serializers.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\urls.py
==============================

from django.urls import path
urlpatterns = [
    # здесь будут ваши URL-маршруты
]
            

==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\views.py
==============================

from django.shortcuts import render, redirect
from django.http import JsonResponse
from .forms import EmployeeForm
from apps.positions.models import Profession
from apps.organizations.models import Organization
from apps.organizations.utils.permissions import user_has_organization_access
from django.contrib.auth.decorators import login_required

@login_required
def create_employee(request):
    """
    Представление для создания нового сотрудника.

    Args:
        request: Объект запроса Django.

    Returns:
         HttpResponse: Страница с формой для создания сотрудника
    """
    if request.method == 'POST':
         form = EmployeeForm(request.POST)
         if form.is_valid():
             employee = form.save(commit=False)
             user_has_organization_access(request.user, employee.organization.id)
             employee.save()
             return redirect('employee_list') # Предполагаем, что есть URL для списка сотрудников
    else:
        form = EmployeeForm()
    organizations = Organization.objects.all()
    return render(request, 'employees/employee_form.html', {'form': form, 'organizations': organizations})

@login_required
def get_professions(request):
    """
    Представление для получения списка профессий по организации.

    Args:
         request: Объект запроса Django.

    Returns:
         JsonResponse: JSON-ответ со списком профессий.
    """
    organization_id = request.GET.get('organization_id')
    professions = Profession.objects.filter(organization_id=organization_id)
    data = [{"id": prof.id, "department_name": prof.department_name} for prof in professions]
    return JsonResponse(data, safe=False)


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\migrations\0001_initial.py
==============================
# Generated by Django 5.1.4 on 2025-01-14 14:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0001_initial'),
        ('positions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='ФИО')),
                ('full_name_dative', models.CharField(max_length=255, verbose_name='ФИО в дательном падеже')),
                ('birth_date', models.DateField(verbose_name='Дата рождения')),
                ('is_contract_work', models.BooleanField(default=False, verbose_name='Договор подряда')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.organization', verbose_name='Организация')),
                ('profession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='positions.profession', verbose_name='Профессия (Должность)')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
            },
        ),
    ]


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\employees\migrations\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\admin.py
==============================

from django.contrib import admin
from .models import Organization, Department

admin.site.register(Organization)
admin.site.register(Department)


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\apps.py
==============================

from django.apps import AppConfig

class OrganizationsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.organizations'


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\models.py
==============================

from django.db import models

class Organization(models.Model):
    full_name = models.CharField(max_length=255, verbose_name="Полное наименование организации")
    short_name = models.CharField(max_length=100, verbose_name="Сокращенное наименование организации")
    full_name_ru = models.CharField(max_length=255, verbose_name="Полное наименование организации (рус)")
    full_name_by = models.CharField(max_length=255, verbose_name="Полное наименование организации (бел)")
    requisites_ru = models.TextField(verbose_name="Реквизиты организации (рус)")
    requisites_by = models.TextField(verbose_name="Реквизиты организации (бел)")

    def __str__(self):
        return self.full_name

    class Meta:
        verbose_name = "Организация"
        verbose_name_plural = "Организации"

class Department(models.Model):
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='departments', verbose_name="Организация")
    name = models.CharField(max_length=255, verbose_name="Наименование структурного подразделения")
    short_name = models.CharField(max_length=100, verbose_name="Сокращенное наименование")

    def __str__(self):
        return f"{self.name} ({self.organization.short_name})"

    class Meta:
        verbose_name = "Структурное подразделение"
        verbose_name_plural = "Структурные подразделения"


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\serializers.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\urls.py
==============================

from django.urls import path
urlpatterns = [
    # здесь будут ваши URL-маршруты
]
            

==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\views.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\migrations\0001_initial.py
==============================
# Generated by Django 5.1.4 on 2025-01-14 14:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='Полное наименование организации')),
                ('short_name', models.CharField(max_length=100, verbose_name='Сокращенное наименование организации')),
                ('full_name_ru', models.CharField(max_length=255, verbose_name='Полное наименование организации (рус)')),
                ('full_name_by', models.CharField(max_length=255, verbose_name='Полное наименование организации (бел)')),
                ('requisites_ru', models.TextField(verbose_name='Реквизиты организации (рус)')),
                ('requisites_by', models.TextField(verbose_name='Реквизиты организации (бел)')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование структурного подразделения')),
                ('short_name', models.CharField(max_length=100, verbose_name='Сокращенное наименование')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='organizations.organization', verbose_name='Организация')),
            ],
            options={
                'verbose_name': 'Структурное подразделение',
                'verbose_name_plural': 'Структурные подразделения',
            },
        ),
    ]


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\migrations\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\organizations\utils\permissions.py
==============================

from django.core.exceptions import PermissionDenied

def user_has_organization_access(user, organization_id):
    """
    Проверяет, имеет ли пользователь доступ к данной организации.

    Args:
        user: Объект пользователя Django.
        organization_id: ID организации, к которой запрашивается доступ.

    Returns:
        None: Если у пользователя есть доступ.
        Raises PermissionDenied: Если доступа нет.
    """
    if not user.is_authenticated:
        raise PermissionDenied("Пользователь не аутентифицирован.")

    if not hasattr(user, 'organization') or not user.organization:
        raise PermissionDenied("Пользователь не привязан к организации.")

    if user.organization.id != int(organization_id):
        raise PermissionDenied("У пользователя нет доступа к данной организации.")


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\admin.py
==============================

from django.contrib import admin
from .models import Profession

admin.site.register(Profession)


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\apps.py
==============================

from django.apps import AppConfig

class PositionsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.positions'


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\models.py
==============================

from django.db import models
from apps.organizations.models import Organization, Department

class Profession(models.Model):
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, verbose_name="Организация")
    department = models.ForeignKey(Department, on_delete=models.CASCADE, verbose_name="Структурное подразделение")
    department_name = models.CharField(max_length=255, verbose_name="Наименование отдела")
    instruction_numbers = models.CharField(max_length=255, verbose_name="Номера инструкций по охране труда")
    el_group = models.CharField(max_length=5, verbose_name="Группа по электробезопасности")
    probation_period = models.IntegerField(verbose_name="Срок стажировки")
    contract_instruction = models.CharField(max_length=255, verbose_name="Инструкции по договору подряда")
    is_responsible = models.BooleanField(default=False, verbose_name="Ответственный за охрану труда")
    is_electrical_staff = models.BooleanField(default=False, verbose_name="Является ли электротехническим персоналом")

    def __str__(self):
         return f"{self.department_name} ({self.organization.short_name})"
    class Meta:
        verbose_name = "Профессия/Должность"
        verbose_name_plural = "Профессии/Должности"


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\serializers.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\urls.py
==============================

from django.urls import path
urlpatterns = [
    # здесь будут ваши URL-маршруты
]
            

==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\views.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\migrations\0001_initial.py
==============================
# Generated by Django 5.1.4 on 2025-01-14 14:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=255, verbose_name='Наименование отдела')),
                ('instruction_numbers', models.CharField(max_length=255, verbose_name='Номера инструкций по охране труда')),
                ('el_group', models.CharField(max_length=5, verbose_name='Группа по электробезопасности')),
                ('probation_period', models.IntegerField(verbose_name='Срок стажировки')),
                ('contract_instruction', models.CharField(max_length=255, verbose_name='Инструкции по договору подряда')),
                ('is_responsible', models.BooleanField(default=False, verbose_name='Ответственный за охрану труда')),
                ('is_electrical_staff', models.BooleanField(default=False, verbose_name='Является ли электротехническим персоналом')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.department', verbose_name='Структурное подразделение')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.organization', verbose_name='Организация')),
            ],
            options={
                'verbose_name': 'Профессия/Должность',
                'verbose_name_plural': 'Профессии/Должности',
            },
        ),
    ]


==============================
ФАЙЛ: d:\YandexDisk\OT_online\apps\positions\migrations\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\config\asgi.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\config\settings.py
==============================

import os
from pathlib import Path
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = config('SECRET_KEY', default='django-insecure-!d(n1l5@t$i1%e*s5x4l$6h64m56^g@l9h@&c7(e29835p^')
DEBUG = config('DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*').split(',')
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.documents',
    'apps.employees',
    'apps.organizations',
    'apps.positions',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'config.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'config.wsgi.application'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
LANGUAGE_CODE = 'ru-RU'
TIME_ZONE = 'Europe/Minsk'
USE_I18N = True
USE_TZ = True
STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



==============================
ФАЙЛ: d:\YandexDisk\OT_online\config\urls.py
==============================

from django.contrib import admin
from django.urls import path, include
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('apps.employees.urls')),
    path('', include('apps.organizations.urls')),
    path('', include('apps.positions.urls')),
    path('', include('apps.documents.urls')),
]


==============================
ФАЙЛ: d:\YandexDisk\OT_online\config\wsgi.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\config\__init__.py
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\templates\base.html
==============================


==============================
ФАЙЛ: d:\YandexDisk\OT_online\templates\employee_form.html
==============================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Добавление сотрудника</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h2>Добавление сотрудника</h2>
    <form method="post">
        {% csrf_token %}
        <label for="organization">Организация:</label>
        <select id="organization" name="organization">
            <option value="">Выберите организацию</option>
            {% for org in organizations %}
                <option value="{{ org.id }}">{{ org.full_name }}</option>
            {% endfor %}
        </select>
        <br><br>
       <label for="profession">Профессия:</label>
         <select id="profession" name="profession">
            <option value="">Выберите профессию</option>
         </select>
        <br><br>
        {{ form.as_p }}
        <button type="submit">Добавить сотрудника</button>
    </form>

    <script>
        $(document).ready(function() {
            $('#organization').change(function() {
                const organizationId = $(this).val();
                const url = "{% url 'get_professions' %}";
                if (organizationId) {
                    $.ajax({
                        url: url,
                        data: {'organization_id': organizationId},
                        success: function(data) {
                            $('#profession').empty();
                            $('#profession').append('<option value="">Выберите профессию</option>');
                            data.forEach(function(item) {
                                $('#profession').append('<option value="' + item.id + '">' + item.department_name + '</option>');
                            });
                        }
                    });
                } else {
                    $('#profession').empty();
                    $('#profession').append('<option value="">Выберите профессию</option>');
                }
            });
        });
    </script>
</body>
</html>


==============================
ФАЙЛ: d:\YandexDisk\OT_online\templates\index.html
==============================
