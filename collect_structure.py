import os
from pathlib import Path

def collect_project_paths(base_dir: Path, ignore_patterns: set = None) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ, –∏—Å–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    Args:
        base_dir: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        ignore_patterns: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ {'directories': [...], 'files': [...]}
    """
    if ignore_patterns is None:
        ignore_patterns = {
            # –°–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            '__pycache__',
            '.git',
            '.idea',
            '.vscode',
            'venv',
            'env',
            'node_modules',
            # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            '.gitignore',
            '.env',
            '.DS_Store',
            'desktop.ini',
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            '*.pyc',
            '*.pyo',
            '*.pyd',
            '.Python',
            '*.so',
            # –ö—ç—à –∏ –ª–æ–≥–∏
            '*.log',
            '*.sqlite3',
            '*.db',
            # –ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            '*.mo',
            '*.pot',
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'local_settings.py'
        }

    project_paths = {
        'directories': [],
        'files': []
    }

    try:
        for root, dirs, files in os.walk(base_dir):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not any(
                pattern in d for pattern in ignore_patterns if '*' not in pattern
            )]

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for dir_name in dirs:
                dir_path = Path(root) / dir_name
                rel_path = dir_path.relative_to(base_dir)
                project_paths['directories'].append(str(rel_path))

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            for file_name in files:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                if any(file_name.endswith(pattern.replace('*', ''))
                       for pattern in ignore_patterns if '*' in pattern):
                    continue

                if any(pattern in file_name
                       for pattern in ignore_patterns if '*' not in pattern):
                    continue

                file_path = Path(root) / file_name
                rel_path = file_path.relative_to(base_dir)
                project_paths['files'].append(str(rel_path))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        project_paths['directories'].sort()
        project_paths['files'].sort()

        return project_paths

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø—É—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
        return project_paths


def print_project_structure(paths: dict):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

    Args:
        paths: –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
    """
    print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    print("\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    for dir_path in paths['directories']:
        print(f"  üìÅ {dir_path}")

    print("\n–§–∞–π–ª—ã:")
    for file_path in paths['files']:
        print(f"  üìÑ {file_path}")


def save_project_structure(paths: dict, output_file: str = 'project_structure.txt'):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–∞–π–ª

    Args:
        paths: –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
        output_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n")

            f.write("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n")
            for dir_path in paths['directories']:
                f.write(f"  {dir_path}\n")

            f.write("\n–§–∞–π–ª—ã:\n")
            for file_path in paths['files']:
                f.write(f"  {file_path}\n")

        print(f"\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {output_file}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")


def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    base_dir = Path.cwd()

    print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {base_dir}")

    # –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç–∏
    project_paths = collect_project_paths(base_dir)

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print_project_structure(project_paths)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    save_project_structure(project_paths)


if __name__ == "__main__":
    main()